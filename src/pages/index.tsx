import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { api } from "~/utils/api";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>SmartContractGPT</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex flex-col items-center gap-2">
            <h1 className="text-bold text-6xl">Welcome to SmartContractGPT</h1>
            <h5 className="pt-4 text-2xl">
              Have your smart contract audited for as little as 5 NEAR!
            </h5>
            <Container />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const Container: React.FC = () => {
  const { data: sessionData } = useSession();
  const { data: repoData } = api.repos.getRepos.useQuery(undefined, {
    enabled: sessionData?.user !== undefined,
  });
  console.log(repoData);
  const [loading, setLoading] = useState<boolean>(false);

  const { data: keyPomData } = api.keypom.getKeyPomAccountBalance.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
    }
  );

  const createKeyPom = api.keypom.createKeyPom.useQuery(undefined, {
    enabled: false,
  });

  const handleCreateKeyPom = async () => {
    await createKeyPom.refetch().catch((err) => {
      console.log(err);
    });
    window.location.reload();
  };

  const handleClick = () => {
    void handleCreateKeyPom();
  };

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl ">
        {sessionData && <span>You are currently logged in.</span>}
        <button
          className="my-2 mx-4 rounded-full bg-gray-500 px-4 py-2 font-semibold text-white no-underline transition hover:bg-gray-800"
          onClick={sessionData ? () => void signOut() : () => void signIn()}
        >
          {sessionData ? "Sign out" : "Sign In"}
        </button>
        {keyPomData ? (
          <div className="rounded bg-blue-400 px-4 py-2">
            You have claimed a trial account! Now go into one of your repos.
          </div>
        ) : (
          <button
            className="rounded bg-green-400 px-4 py-2 hover:bg-green-600"
            onClick={handleClick}
          >
            Create a trial account
          </button>
        )}

        {/* <p className="py-2 text-2xl font-bold"> Select one of your repos!</p> */}
        {repoData?.map((repo) => {
          return (
            <div
              key={repo.repoName}
              className="my-1 bg-gray-500 px-2 text-white hover:bg-gray-800"
            >
              <Link href={`/repo/thalasith/${repo.repoName}`}>{repo.name}</Link>
            </div>
          );
        })}
      </p>
    </div>
  );
};
