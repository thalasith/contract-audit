import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import * as keypom from "keypom-js";
import { api } from "~/utils/api";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // const handleKeyPomGenerate = async () => {
  //   await keypom.initKeypom({
  //     network: "testnet",
  //     funder: {
  //       accountId: "benji_demo.testnet",
  //       secretKey:
  //         "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1",
  //     },
  //   });
  //   const { publicKeys, secretKeys } = await keypom.generateKeys({
  //     numKeys: 1,
  //   });
  //   console.log("publicKeys", publicKeys);
  //   console.log("secretKeys", secretKeys);
  //   await keypom.createDrop({ publicKeys, depositPerUseNEAR: 1 });
  //   await keypom.claim({
  //     secretKey: secretKeys[0],
  //     newAccountId: "dkfjasdlfkjwefwe.testnet",
  //     newPublicKey: publicKeys[0],
  //   });
  // };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex flex-col items-center gap-2">
            {/* <button className="bg-gray-400" onClick={handleKeyPomGenerate}>
              Click me
            </button> */}
            <p className="text-2xl ">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  const { data: repoData } = api.repos.getRepos.useQuery(undefined, {
    enabled: sessionData?.user !== undefined,
  });

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl ">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {repoData?.map((repo) => {
          return (
            <div key={repo.repoName}>
              <Link
                className="my-1 bg-gray-500 px-2 text-white"
                href={`/repo/thalasith/${repo.repoName}`}
              >
                {repo.name}
              </Link>
            </div>
          );
        })}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
